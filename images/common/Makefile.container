CONTAINERFILE?=		Containerfile

PODMAN?=		podman
BUILDAH?=		buildah

DOCKER?=		docker
DOCKER_BUILDKIT?=	1
ROOTLESSKIT?=		rootlesskit

## ======================================================================

C_MANAGER?=		$(shell command -v $(PODMAN) || command -v $(DOCKER))
C_MANAGER_ENV?=
C_MANAGER_OPTS?=
C_MANAGER_CMD?=		$(C_MANAGER_X_ENV) $(C_MANAGER_ENV) $(C_MANAGER) $(C_MANAGER_X_OPTS) $(C_MANAGER_OPTS)

C_MANAGER_RUN_ENV?=
C_MANAGER_RUN_OPTS?=
C_MANAGER_RUN_CMD?=	$(C_MANAGER_X_RUN_ENV) $(C_MANAGER_RUN_ENV) $(C_MANAGER_CMD) run $(C_MANAGER_RUN_X_OPTS) $(C_MANAGER_RUN_OPTS)

## ----------------------------------------------------------------------

C_BUILDER_ENV?=
C_BUILDER_OPTS?=
C_BUILDER_CMD?=		$(C_BUILDER_X_ENV) $(C_BUILDER_ENV) $(C_BUILDER) $(C_BUILDER_X_OPTS) $(C_BUILDER_OPTS)

C_BUILDER_BUILD_ENV?=
C_BUILDER_BUILD_OPTS?=
C_BUILDER_BUILD_CMD?=	$(C_BUILDER_BUILD_X_ENV) $(C_BUILDER_BUILD_ENV) $(C_BUILDER_CMD) build --file $(CONTAINERFILE) $(C_BUILDER_BUILD_X_OPTS) $(C_BUILDER_BUILD_OPTS)

C_BUILDER_PUSH_ENV?=
C_BUILDER_PUSH_OPTS?=
C_BUILDER_PUSH_CMD?=	$(C_BUILDER_PUSH_X_ENV) $(C_BUILDER_PUSH_ENV) $(C_BUILDER_CMD) push $(C_BUILDER_PUSH_X_OPTS) $(C_BUILDER_PUSH_OPTS)

## ----------------------------------------------------------------------

ifneq (,$(findstring docker,$(C_MANAGER)))
C_BUILDER?=		$(C_MANAGER)
C_UNSHARE?=		$(ROOTLESSKIT)
endif

ifneq (,$(findstring podman,$(C_MANAGER)))
C_BUILDER?=		$(BUILDAH)
C_UNSHARE?=		$(BUILDAH) unshare
endif

ifneq (,$(findstring docker,$(C_BUILDER)))
C_BUILDER_X_ENV?=	DOCKER_BUILDKIT=$(DOCKER_BUILDKIT)
C_BUILDER_BUILD_X_OPTS?=--progress=plain
endif

## ----------------------------------------------------------------------

CURL?=			curl
CURL_OPTS?=		--xattr
CURL_CMD?=		$(CURL) $(CURL_OPTS)

## ----------------------------------------------------------------------

RUN_CONTAINER_OPTS?=	--interactive --tty --rm
RUN_CMD?=		bash

## ----------------------------------------------------------------------

ifndef IMAGE_NAME
  $(error IMAGE_NAME is not set)
endif

## ======================================================================

.PHONY: default
default: help

.PHONY: help
help:
	@ echo 'Usage: $(MAKE) <status|image|run>'

.PHONY: clean
clean:
	$(RM) *.tmp $(IMAGE_DEPS) $(RUN_DEPS)

.PHONY: status
status:
	@ printf '%-20s %s\n' \
		C_MANAGER "$(strip $(C_MANAGER))" \
		C_MANAGER_CMD "$(strip $(C_MANAGER_CMD))" \
		C_MANAGER_RUN_CMD "$(strip $(C_MANAGER_RUN_CMD))" \
		C_BUILDER "$(strip $(C_BUILDER))" \
		C_BUILDER_CMD "$(strip $(C_BUILDER_CMD))" \
		C_BUILDER_BUILD_CMD "$(strip $(C_BUILDER_BUILD_CMD))" \
		C_BUILDER_PUSH_CMD "$(strip $(C_BUILDER_PUSH_CMD))" \
		C_UNSHARE "$(strip $(C_UNSHARE))" \
		CURL "$(strip $(CURL))" \
		CURL_CMD "$(strip $(CURL_CMD))" \
		IMAGE_NAME "$(strip $(IMAGE_NAME))" \
		IMAGE_DEPS "$(strip $(IMAGE_DEPS))" \
		RUN_CMD "$(strip $(RUN_CMD))" \
		RUN_DEPS "$(strip $(RUN_DEPS))" \
	;

.PHONY: image
image: $(IMAGE_DEPS)
	$(C_BUILDER_BUILD_CMD) --tag $(IMAGE_NAME) .

.PHONY: push
push:
	$(C_BUILDER_PUSH_CMD) $(IMAGE_NAME)

.PHONY: run
run: $(RUN_DEPS)
	$(C_MANAGER_RUN_CMD) \
	  $(C_MANAGER_RUN_OPTS) \
	  $(RUN_CONTAINER_OPTS) \
	  $(IMAGE_NAME) \
	  $(RUN_CMD) \
	;
