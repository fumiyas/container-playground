PODMAN?=		podman
DOCKER?=		docker

ARCH=			$(shell uname -m)

## ======================================================================

IMAGE_NAME?=		$(error Set IMAGE_NAME in your Makefile)

IMAGE_PLATFORM_OS?=	linux

ifeq ($(ARCH),x86_64)
IMAGE_PLATFORM_ARCH?=	amd64
endif
ifeq ($(ARCH),aarch64)
IMAGE_PLATFORM_ARCH?=	arm64
endif
IMAGE_PLATFORM_ARCH?=	$(ARCH)

IMAGE_PLATFORM?=	$(IMAGE_PLATFORM_OS)/$(IMAGE_PLATFORM_ARCH)

## ======================================================================

C_MANAGERS?=		$(PODMAN) $(DOCKER)
C_FILES?=		Containerfile Dockerfile

ifndef C_MANAGER
C_MANAGER:=$(shell \
	for c in $(C_MANAGERS); do \
		command -v "$$c" && exit 0; \
	done; \
	echo "No container manager found: $(C_MANAGERS)"; \
	exit 1; \
)
endif

ifndef C_FILE
C_FILE=$(shell \
	for f in $(C_FILES); do \
		if [ -s "$$f" ]; then \
			echo "$$f"; \
			exit 0; \
		fi; \
	done; \
	echo "No container file found: $(C_FILES)"; \
	exit 1; \
)
endif

## ======================================================================

include $(dir $(lastword $(MAKEFILE_LIST)))/Makefile.$(notdir $(C_MANAGER))

## ======================================================================

C_MANAGER_ENV?=
C_MANAGER_OPTS?=
C_MANAGER_CMD?=		$(_C_MANAGER_ENV) $(C_MANAGER_ENV) $(C_MANAGER) $(_C_MANAGER_OPTS) $(C_MANAGER_OPTS)

C_MANAGER_RUN_ENV?=
C_MANAGER_RUN_OPTS?=	--interactive --tty --rm
C_MANAGER_RUN_CMD?=	$(_C_MANAGER_RUN_ENV) $(C_MANAGER_RUN_ENV) $(C_MANAGER_CMD) run $(_C_MANAGER_RUN_OPTS) $(C_MANAGER_RUN_OPTS)

## ----------------------------------------------------------------------

C_UNSHARE_ENV?=
C_UNSHARE_OPTS?=
C_UNSHARE_CMD?=		$(_C_UNSHARE_ENV) $(C_UNSHARE_ENV) $(C_UNSHARE) $(_C_UNSHARE_OPTS) $(C_UNSHARE_OPTS)

## ----------------------------------------------------------------------

C_BUILDER_ENV?=
C_BUILDER_OPTS?=
C_BUILDER_CMD?=		$(_C_BUILDER_ENV) $(C_BUILDER_ENV) $(C_BUILDER) $(_C_BUILDER_OPTS) $(C_BUILDER_OPTS)

C_BUILDER_BUILD_ENV?=
C_BUILDER_BUILD_OPTS?=
C_BUILDER_BUILD_CMD?=	$(_C_BUILDER_BUILD_ENV) $(C_BUILDER_BUILD_ENV) $(C_BUILDER_CMD) $(C_BUILDER_BUILD_SUBCMD) $(_C_BUILDER_BUILD_OPTS) $(C_BUILDER_BUILD_OPTS)

C_BUILDER_PUSH_ENV?=
C_BUILDER_PUSH_OPTS?=
C_BUILDER_PUSH_CMD?=	$(_C_BUILDER_PUSH_ENV) $(C_BUILDER_PUSH_ENV) $(C_BUILDER_CMD) push $(_C_BUILDER_PUSH_OPTS) $(C_BUILDER_PUSH_OPTS)

## ----------------------------------------------------------------------

_C_BUILDER_BUILD_OPTS+=	--file $(C_FILE) --platform $(IMAGE_PLATFORM)
ifneq (,$(IMAGE_BUILD_DATE))
_C_BUILDER_BUILD_OPTS+=	--build-arg BUILD_DATE=$(IMAGE_BUILD_DATE)
endif
ifneq (,$(IMAGE_BUILD_VCS_REF))
_C_BUILDER_BUILD_OPTS+=	--build-arg VCS_REF=$(IMAGE_BUILD_VCS_REF)
endif

## ======================================================================

.PHONY: default
default: help

.PHONY: help
help:
	@ echo 'Usage: $(MAKE) <show-env|image|run>'

.PHONY: clean
clean:
	$(RM) *.tmp $(IMAGE_DEPS) $(RUN_DEPS)

.PHONY: show-env
show-env:
	@ printf '%-20s %s\n' \
		C_MANAGER "$(strip $(C_MANAGER))" \
		C_MANAGER_CMD "$(strip $(C_MANAGER_CMD))" \
		C_MANAGER_RUN_CMD "$(strip $(C_MANAGER_RUN_CMD))" \
		C_UNSHARE "$(strip $(C_UNSHARE))" \
		C_UNSHARE_CMD "$(strip $(C_UNSHARE_CMD))" \
		C_BUILDER "$(strip $(C_BUILDER))" \
		C_BUILDER_CMD "$(strip $(C_BUILDER_CMD))" \
		C_BUILDER_BUILD_CMD "$(strip $(C_BUILDER_BUILD_CMD))" \
		C_BUILDER_PUSH_CMD "$(strip $(C_BUILDER_PUSH_CMD))" \
		IMAGE_NAME "$(strip $(IMAGE_NAME))" \
		IMAGE_DEPS "$(strip $(IMAGE_DEPS))" \
		RUN_CMD "$(strip $(RUN_CMD))" \
		RUN_DEPS "$(strip $(RUN_DEPS))" \
	;

.PHONY: image
image: $(IMAGE_DEPS)
	$(C_BUILDER_BUILD_CMD) --tag $(IMAGE_NAME) .

.PHONY: push
push:
	$(C_BUILDER_PUSH_CMD) $(IMAGE_NAME)

.PHONY: run
run: $(RUN_DEPS)
	$(C_MANAGER_RUN_CMD) \
	  $(IMAGE_NAME) \
	  $(RUN_CMD) \
	;
